import requests
import re
import json
import ast
import warnings
from urllib.parse import urljoin, urlparse
from bs4 import BeautifulSoup

warnings.filterwarnings('ignore')  # Menyembunyikan peringatan SSL

# Konfigurasi tambahan untuk deteksi lebih akurat
CORS_REGEX = r"Access-Control-Allow-Origin\s*:\s*['\"]?\*['\"]?"
INSECURE_FETCH_REGEX = r"fetch\([^,]+,\s*\{[^}]*credentials\s*:\s*['\"]include['\"][^}]*\}\)"
DANGEROUS_FUNCTIONS = ['eval', 'innerHTML', 'document.write']
SECRET_PATTERNS = {
    'api_key': r'(?i)(api|key|token|secret)[\s_-]?key[\'"]?\s*[:=]\s*[\'"]([^\'"]{15,50}|[a-zA-Z0-9_-]{15,50})',
    'jwt_token': r'(?i)(eyJ[a-zA-Z0-9_-]{5,}\.[a-zA-Z0-9_-]{5,}\.[a-zA-Z0-9_-]{5,})',
    'aws_keys': r'(?i)(AKIA|A3T|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[0-9A-Z]{16}',
    'oauth': r'(?i)oauth[_\s-]?token[\'"]?\s*[:=]\s*[\'"]([^\'"]{15,70})',
}

def extract_js_urls(url, use_rendering=False):
    try:
        if use_rendering:
            try:
                from requests_html import HTMLSession
                session = HTMLSession()
                response = session.get(url, timeout=30)
                response.html.render(timeout=60, sleep=2)
                soup = BeautifulSoup(response.html.html, 'html.parser')
            except ImportError:
                print("Requests-HTML tidak terinstal. Menggunakan metode statis...")
                response = requests.get(url, timeout=15)
                soup = BeautifulSoup(response.text, 'html.parser')
            except Exception as e:
                print(f"Error rendering page: {e}. Menggunakan metode statis...")
                response = requests.get(url, timeout=15)
                soup = BeautifulSoup(response.text, 'html.parser')
        else:
            response = requests.get(url, timeout=15)
            soup = BeautifulSoup(response.text, 'html.parser')
        
        js_urls = []
        
        # Ekstrak URL dari tag script
        for script in soup.find_all('script'):
            if script.get('src'):
                js_url = urljoin(url, script.get('src'))
                js_urls.append(js_url)
        
        # Ekstrak URL dari event handlers dan atribut JavaScript
        for tag in soup.find_all():
            for attr in [attr for attr in tag.attrs if attr.startswith('on')]:
                handler = tag[attr]
                urls = re.findall(r"['\"](https?://[^'\"\s]+\.js)['\"]", handler)
                js_urls.extend(urls)
        
        # Ekstrak URL dari inline JavaScript
        for script in soup.find_all('script'):
            if not script.get('src') and script.string:
                urls = re.findall(r"['\"](https?://[^'\"\s]+\.js)['\"]", script.string)
                js_urls.extend(urls)
        
        return list(set(js_urls))  # Hapus duplikat
    
    except Exception as e:
        print(f"Error extracting JS URLs: {e}")
        return []

def analyze_with_ast(js_code):
    findings = {
        'dangerous_functions': [],
        'eval_usage': [],
        'dom_xss': [],
        'cors_misconfig': [],
        'insecure_fetch': []
    }
    
    try:
        # Parse JavaScript menggunakan AST
        tree = ast.parse(js_code)
        
        # Traverse AST tree
        for node in ast.walk(tree):
            # Deteksi fungsi berbahaya
            if isinstance(node, ast.Call) and isinstance(node.func, ast.Name):
                func_name = node.func.id
                if func_name in DANGEROUS_FUNCTIONS:
                    findings['dangerous_functions'].append({
                        'function': func_name,
                        'line': node.lineno,
                        'code': ast.get_source_segment(js_code, node)
                    })
            
            # Deteksi penggunaan eval khusus
            if isinstance(node, ast.Call) and isinstance(node.func, ast.Name) and node.func.id == 'eval':
                findings['eval_usage'].append({
                    'line': node.lineno,
                    'code': ast.get_source_segment(js_code, node)
                })
            
            # Deteksi manipulasi DOM berbahaya
            if isinstance(node, ast.Assign):
                for target in node.targets:
                    if isinstance(target, ast.Attribute) and target.attr == 'innerHTML':
                        findings['dom_xss'].append({
                            'line': node.lineno,
                            'code': ast.get_source_segment(js_code, node)
                        })
            
            # Deteksi CORS misconfiguration dalam kode
            if isinstance(node, ast.Expr) and isinstance(node.value, ast.Str):
                if re.search(CORS_REGEX, node.value.s):
                    findings['cors_misconfig'].append({
                        'line': node.lineno,
                        'code': node.value.s
                    })
            
            # Deteksi fetch dengan credentials include
            if isinstance(node, ast.Call) and isinstance(node.func, ast.Name) and node.func.id == 'fetch':
                if any(kw.arg == 'credentials' and kw.value.s == 'include' for kw in node.keywords):
                    findings['insecure_fetch'].append({
                        'line': node.lineno,
                        'code': ast.get_source_segment(js_code, node)
                    })
    
    except SyntaxError:
        # Jika kode tidak valid, gunakan metode regex sebagai fallback
        print("AST parsing gagal. Menggunakan metode regex fallback...")
        findings = regex_fallback_analysis(js_code)
    except Exception as e:
        print(f"Error in AST analysis: {e}")
    
    return findings

def regex_fallback_analysis(js_code):
    findings = {
        'dangerous_functions': [],
        'eval_usage': [],
        'dom_xss': [],
        'cors_misconfig': [],
        'insecure_fetch': []
    }
    
    # Deteksi fungsi berbahaya dengan regex
    for func in DANGEROUS_FUNCTIONS:
        matches = re.finditer(rf"{func}\s*\(", js_code)
        for match in matches:
            start, end = match.span()
            findings['dangerous_functions'].append({
                'function': func,
                'code': js_code[start:start+50] + '...'
            })
    
    # Deteksi CORS misconfiguration
    cors_matches = re.finditer(CORS_REGEX, js_code)
    for match in cors_matches:
        findings['cors_misconfig'].append({
            'code': match.group(0)
        })
    
    # Deteksi fetch tidak aman
    fetch_matches = re.finditer(INSECURE_FETCH_REGEX, js_code)
    for match in fetch_matches:
        findings['insecure_fetch'].append({
            'code': match.group(0)
        })
    
    # Deteksi innerHTML
    dom_matches = re.finditer(r"\.innerHTML\s*=", js_code)
    for match in dom_matches:
        findings['dom_xss'].append({
            'code': match.group(0)
        })
    
    return findings

def analyze_js(js_url):
    vulnerabilities = {
        'endpoints': [],
        'secrets': [],
        'sensitive_comments': [],
        'debug_endpoints': [],
        'ast_findings': {},
        'cors_vulnerabilities': []
    }
    
    try:
        response = requests.get(js_url, timeout=20)
        js_code = response.text
        
        # 1. Deteksi endpoint dan API
        endpoints = re.findall(r'[\'\"](https?://[^\'\"\s]+|/[^\'\"\s]+)[\'\"]', js_code)
        vulnerabilities['endpoints'] = list(set(endpoints))
        
        # 2. Deteksi rahasia dan kredensial
        for secret_type, pattern in SECRET_PATTERNS.items():
            matches = re.findall(pattern, js_code)
            for match in matches:
                if isinstance(match, tuple):
                    secret = match[1] if len(match) > 1 else match[0]
                else:
                    secret = match
                vulnerabilities['secrets'].append({
                    'type': secret_type,
                    'value': secret
                })
        
        # 3. Deteksi komentar sensitif
        sensitive_comments = re.findall(r'//\s*(TODO|FIXME|SECURITY|DEBUG|TEST|ADMIN|PASSWORD|TOKEN).*', js_code)
        vulnerabilities['sensitive_comments'] = list(set(sensitive_comments))
        
        # 4. Deteksi debug endpoints
        debug_endpoints = re.findall(r'[\'\"](/debug|/test|/console|/admin|/dev)[\w/_-]*[\'\"]', js_code, re.I)
        vulnerabilities['debug_endpoints'] = list(set(debug_endpoints))
        
        # 5. Analisis AST untuk kerentanan kompleks
        vulnerabilities['ast_findings'] = analyze_with_ast(js_code)
        
        # 6. Deteksi CORS misconfiguration
        cors_matches = re.findall(CORS_REGEX, js_code)
        vulnerabilities['cors_vulnerabilities'] = list(set(cors_matches))
        
        return vulnerabilities
    
    except Exception as e:
        print(f"Error analyzing {js_url}: {e}")
        return vulnerabilities

def save_results(all_results, output_format='json'):
    if output_format == 'json':
        with open('js_vulnerabilities.json', 'w') as f:
            json.dump(all_results, f, indent=2)
        print("Hasil lengkap disimpan di js_vulnerabilities.json")
    
    elif output_format == 'txt':
        with open('js_vulnerabilities.txt', 'w') as f:
            for url, results in all_results.items():
                f.write(f"URL: {url}\n")
                f.write("="*80 + "\n")
                
                if results['endpoints']:
                    f.write("\n[ENDPOINTS]\n")
                    for endpoint in results['endpoints']:
                        f.write(f"- {endpoint}\n")
                
                if results['secrets']:
                    f.write("\n[SECRETS]\n")
                    for secret in results['secrets']:
                        f.write(f"- {secret['type'].upper()}: {secret['value']}\n")
                
                if results['sensitive_comments']:
                    f.write("\n[SENSITIVE COMMENTS]\n")
                    for comment in results['sensitive_comments']:
                        f.write(f"- {comment}\n")
                
                if results['debug_endpoints']:
                    f.write("\n[DEBUG ENDPOINTS]\n")
                    for endpoint in results['debug_endpoints']:
                        f.write(f"- {endpoint}\n")
                
                if results['cors_vulnerabilities']:
                    f.write("\n[CORS VULNERABILITIES]\n")
                    for cors in results['cors_vulnerabilities']:
                        f.write(f"- {cors}\n")
                
                ast_findings = results['ast_findings']
                for category, findings in ast_findings.items():
                    if findings:
                        f.write(f"\n[{category.upper()}]\n")
                        for item in findings:
                            if 'line' in item:
                                f.write(f"Line {item['line']}: {item['code']}\n")
                            else:
                                f.write(f"- {item['code']}\n")
                
                f.write("\n" + "="*80 + "\n\n")
        print("Hasil lengkap disimpan di js_vulnerabilities.txt")

def main():
    target_url = input("Masukkan URL website: ").strip()
    
    if not target_url.startswith(('http://', 'https://')):
        target_url = 'http://' + target_url
    
    use_rendering = input("Gunakan rendering dinamis untuk JavaScript? (y/n): ").lower() == 'y'
    output_format = input("Format output (json/txt): ").strip().lower() or 'json'
    
    print(f"\n[+] Mengumpulkan file JavaScript dari {target_url}")
    js_urls = extract_js_urls(target_url, use_rendering)
    
    if not js_urls:
        print("Tidak ditemukan file JavaScript!")
        return
    
    print(f"Ditemukan {len(js_urls)} file JavaScript:")
    
    all_results = {}
    for i, js_url in enumerate(js_urls, 1):
        print(f"\n[{i}/{len(js_urls)}] Menganalisis: {js_url}")
        results = analyze_js(js_url)
        all_results[js_url] = results
        
        # Tampilkan hasil secara ringkas
        vulnerabilities_found = False
        
        if any([results['endpoints'], results['secrets'], results['sensitive_comments'], 
               results['debug_endpoints'], results['cors_vulnerabilities']]):
            vulnerabilities_found = True
            print("Potensi kerentanan ditemukan:")
            
            if results['endpoints']:
                print(f"  - {len(results['endpoints'])} Endpoints")
            
            if results['secrets']:
                print(f"  - {len(results['secrets'])} Rahasia terdeteksi")
            
            if results['sensitive_comments']:
                print(f"  - {len(results['sensitive_comments'])} Komentar sensitif")
            
            if results['debug_endpoints']:
                print(f"  - {len(results['debug_endpoints'])} Debug endpoints")
            
            if results['cors_vulnerabilities']:
                print(f"  - {len(results['cors_vulnerabilities'])} CORS misconfiguration")
        
        ast_findings = results['ast_findings']
        for category, findings in ast_findings.items():
            if findings:
                vulnerabilities_found = True
                print(f"  - {len(findings)} {category.replace('_', ' ')}")
        
        if not vulnerabilities_found:
            print("Tidak ditemukan kerentanan yang jelas")
    
    save_results(all_results, output_format)
    print("\nAnalisis selesai!")

if __name__ == "__main__":
    main()